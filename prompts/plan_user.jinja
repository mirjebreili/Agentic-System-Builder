Problem to solve:
{{ user_goal }}

Requirements:
{{ constraints | default("Prefer well-maintained, popular packages with good documentation. Focus on security and ease of integration.") }}

Package Discovery Notes:
- Break the problem into 3-6 distinct capabilities
- Each capability should map to discoverable packages in npm or PyPI registries
- Consider the complete solution: frontend, backend, data processing, storage, etc.
- Prioritize packages with high download counts, recent updates, and good security scores
- Think about how different ecosystem packages will work together (Python backend + Node.js frontend, etc.)
- Consider deployment and operational requirements

Focus Areas:
- What specific functionality is needed?
- Which programming ecosystem is best suited for each part?
- How will the components communicate and integrate?
- What are the data flow and storage requirements?
