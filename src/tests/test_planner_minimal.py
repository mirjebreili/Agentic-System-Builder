import pytest
from langchain_core.messages import HumanMessage, AIMessage
from src.graph.graph import get_graph

def test_planner_minimal_flow_to_hitl():
    """
    Tests the graph flow from the initial user message to the first HITL stop.
    It verifies that the planner generates the correct candidates and that the
    graph state is correctly populated before the interruption.
    """
    # 1. Build the synthetic "first message"
    question = "مجموع مقادیر انتهایی کلیدهایی که با price_ شروع میشن رو بده."
    plugin_doc_1 = "HttpBasedAtlasReadByKey: A producer tool that reads data from an HTTP-based Atlas service by key."
    plugin_doc_2 = "membasedAtlasKeyStreamAggregator: A consumer/transformer that aggregates a stream of keys."
    first_message_content = f"{question}\n---\n{plugin_doc_1}\n{plugin_doc_2}"

    # 2. Get the compiled graph
    app = get_graph()

    # 3. Define the initial input for the graph, including config for the checkpointer
    initial_state = {"messages": [HumanMessage(content=first_message_content)]}
    config = {"configurable": {"thread_id": "test-minimal-flow-thread"}}

    # 4. Invoke the graph until it interrupts at the HITL node
    interrupted_state = app.invoke(initial_state, config=config)

    # 5. Assert the state at the interruption point
    assert "candidates" in interrupted_state
    assert "messages" in interrupted_state

    # Check the candidates generated by the planner
    candidates = interrupted_state["candidates"]
    assert len(candidates) > 0

    # Find the top candidate based on confidence
    top_candidate = max(candidates, key=lambda c: c["confidence"])

    # Assert the top plan is the correct one
    expected_plan = ["HttpBasedAtlasReadByKey", "membasedAtlasKeyStreamAggregator"]
    assert top_candidate["plan"] == expected_plan

    # Assert rationale and scores (based on the stubbed LLM response)
    assert "Fetch Atlas data" in top_candidate["rationale"]
    scores = top_candidate["scores"]
    assert scores["coverage"] >= 0.9
    assert scores["io"] == 1.0
    assert scores["simplicity"] >= 0.8
    assert scores["constraints"] >= 0.9
    assert top_candidate["raw_score"] > 0.85
    assert top_candidate["confidence"] > 0.6

    # 6. Check that the last message is the AIMessage from the HITL node
    last_message = interrupted_state["messages"][-1]
    assert isinstance(last_message, AIMessage)
    assert "I have generated the following plan candidates." in last_message.content